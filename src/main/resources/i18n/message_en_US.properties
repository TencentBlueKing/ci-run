releaseInfo.name=RunScript
releaseInfo.summary=Execute the script plugin. Support cross-system use.
releaseInfo.description=#### Plugin Functions\n\
Execute the script on the build machine:\n\
- uses Bash for script execution by default\n\
- Optional parser as shown\n\
![image.png](https://raw.githubusercontent.com/TencentBlueKing/ci-run/main/img/command_EN.png)\n\
\n\
#### Applicable scene\n\
execute compile script\n\
\n\
Supports setting current step output variables in the following ways:\n\
```\n\
echo "::set-output name=<output_name>::<output_val>"\n\
```\n\
Such as:\n\
```\n\
echo "::set-output name=release_type::dev"\n\
```\n\
In the downstream step into the parameter:\n\
- Reference this variable value via ${{ jobs.<job_id>.steps.<step_id>.outputs.release_type }}\n\
- <job_id> is the Job ID configured on the current Job\n\
- <step_id> is the Step ID configured on the current Task\n\
\n\
Supports setting/modifying pipeline variables in the following ways:\n\
```\n\
echo "::set-variable name=<var_name>::<var_value>"\n\
```\n\
Such as:\n\
```\n\
echo "::set-variable name=a::1"\n\
```\n\
In the input parameters of downstream steps, refer to this variable through ${{ variables.a }}\n\
\n\
#### Using Restricted and Restricted Resolution [Optional]\n\
When setting output parameters or pipeline variables, **will not take effect in the current step, but will take effect in the downstream steps**\n\
\n\
#### Common failure causes and solutions\n\
1. When the script execution exit code is not 0, the execution result of the current step is failure. Please check the script logic, or confirm whether the execution environment meets the requirements\n\
\n\
#### Multi-line text uses set-output/set-variable/set-gate-value\n\
bash example:\n\
Use format_multiple_lines instead of echo output\n\
```\n\
content=$(ls -l ..)\n\
echo "$content"\n\
format_multiple_lines "::set-output name=content_a::$content"\n\
resultStr="\\n"\n\
resultStr="$resultStr\\n$PATH"\n\
resultStr="$resultStr\\n$PATH"\n\
resultStr="$resultStr\\n$PATH"\n\
echo resultStr=$resultStr\n\
format_multiple_lines "::set-output name=content2_a::$resultStr"\n\
```\n\
\n\
python example:\n\
```\n\
multiple_lines = "line one \\n line two \\n line three"\n\
print("::set-output name=lines::{0}".format(format_multiple_lines(multiple_lines)))\n\
```
releaseInfo.versionInfo.publisher=BlueKing
releaseInfo.versionInfo.versionContent=init
input.shell.label=Set script type
input.shell.desc=Set the script type. By default, Windows executes Batch. Linux and Macos execute Shell.
input.shell.list[0].label=DEFAULT
input.shell.list[8].label=Flexible mode
input.manualDesc.tipStr=Flexible mode allows custom startup commands to support more flexible addition of command startup parameters<br>Note that:<br>①The plug-in script file will replace the ./random_name.xx in the command. Please make sure that this part of the command meets the format requirements<br>②Built-in functions are not supported in flexible mode: for example, format_multiple_lines<br><br><table> <tr> <th>Startup command</th> <th>Operating system</th> <th>Commonly used expandable parameters for commands</th> </tr> <tr> <td>./random_name.sh</td> <td>Linux/MacOS </td> <td>-e (enable interpreter extensions), -x (display executed commands)</td> </tr> <tr> <td>pwsh -command "./random_name.ps1"</td> <td>Linux/Windows/MacOS</td> <td>-NoProfile (do not load user profile), -ExecutionPolicy Bypass (bypass execution policy)</td> </tr> <tr> <td>python3 ./random_name.py</td> <td>Linux/Windows/MacOS</td> <td>-O (optimize generated bytecode), -m (run library module as script)</td> </tr><tr> <td>py ./random_name.py</td> <td>Linux/Windows/MacOS</td> <td>-2 (execute with python2), -3 (execute with python3)</td> </tr> <tr> <td>sh ./random_name.sh</td> <td>Linux/MacOS</td> <td>-c (read command from string), -s (read command from standard input)</td> </tr> <tr> <td>cmd.exe /C ./random_name.bat</td> <td>Windows</td> <td>/Q (turn off echo), /V (enable delayed environment variable expansion)</td> </tr> <tr> <td>powershell -command ./random_name.ps1</td> <td>Windows</td> <td>-NoProfile (do not load user profile), -ExecutionPolicy Bypass (bypass execution policy)</td> </tr> <tr> <td>ruby ./random_name.rb</td> <td>Linux/Windows/MacOS</td> <td>-w (enable warnings), -d (enable debug mode)</td> </tr> <tr> <td>perl ./random_name.pl</td> <td>Linux/Windows/MacOS</td> <td>-w (enable warnings), -d (enable debug mode)</td> </tr> <tr> <td>node ./random_name.js</td> <td>Linux/Windows/MacOS</td> <td>--inspect (enable debugging), --max-old-space-size (set memory limit)</td> </tr><tr> <td>More...</td> <td>Linux/Windows/MacOS</td> <td>More...</td> </tr> </table>
input.manualCommand.placeholder=Please enter the startup command and parameters
input.script.label=Script
input.script.placeholder=Please enter script
input.script.desc=Please enter script
input.charsetType.label=Charset type under windows
input.charsetType.desc=windows only
800007======= Script Execution Failed, Troubleshooting Guide ======%0A%0AWhen the script exit code is non-zero, it indicates that the execution has failed. You can analyze it from the following paths:%0A1. Troubleshoot based on error logs.%0A2. Manually execute the script locally. If it also fails locally, it is likely to be a script logic issue.%0AIf it succeeds locally, troubleshoot the build environment (such as environment dependencies or code changes, etc.).

releaseInfo.name=RunScript
releaseInfo.summary=执行脚本插件。支持跨系统使用。
releaseInfo.description=#### 插件功能\n\
在构建机上执行脚本:\n\
- 默认情况使用Bash进行脚本执行\n\
- 可选解析器如图所示![command.png](./img/command.png)\n\
\n\
#### 适用场景\n\
执行编译脚本\n\
\n\
支持通过如下方式设置当前步骤输出变量：\n\
```\n\
echo "::set-output name=<output_name>::<output_val>"\n\
```\n\
如：\n\
```\n\
echo "::set-output name=release_type::dev"\n\
```\n\
在下游步骤入参中:\n\
- 通过 ${{ jobs.<job_id>.steps.<step_id>.outputs.release_type }} 引用此变量值\n\
- <job_id> 为当前Job上配置的 Job ID\n\
- <step_id> 为当前 Task 上配置的 Step ID\n\
\n\
支持通过如下方式设置/修改流水线变量：\n\
```\n\
echo  "::set-variable name=<var_name>::<var_value>"\n\
```\n\
如：\n\
```\n\
echo  "::set-variable name=a::1"\n\
```\n\
在下游步骤入参中，通过 ${{ variables.a }} 方式引用此变量\n\
\n\
#### 使用限制和受限解决方案[可选]\n\
设置输出参数或者流水线变量时，**在当前步骤不会生效，在下游步骤才生效**\n\
\n\
#### 常见的失败原因和解决方案\n\
1. 脚本执行退出码非0时，当前步骤执行结果为失败，请检查脚本逻辑，或确认执行环境是否满足需求\n\
\n\
#### 多行文本使用set-output/set-variable/set-gate-value\n\
bash示例：\n\
使用format_multiple_lines 替代echo输出\n\
```\n\
content=$(ls -l ..)\n\
echo "$content"\n\
format_multiple_lines "::set-output name=content_a::$content"\n\
resultStr="\\n"\n\
resultStr="$resultStr\\n$PATH"\n\
resultStr="$resultStr\\n$PATH"\n\
resultStr="$resultStr\\n$PATH"\n\
echo resultStr=$resultStr\n\
format_multiple_lines "::set-output name=content2_a::$resultStr"\n\
```\n\
\n\
python 示例：\n\
```\n\
multiple_lines = "line one \\n line two \\n line three"\n\
print("::set-output name=lines::{0}".format(format_multiple_lines(multiple_lines)))\n\
```\n
releaseInfo.versionInfo.publisher=BlueKing
releaseInfo.versionInfo.versionContent=init
input.shell.label=指定脚本语言
input.shell.desc=指定脚本语言，默认时Windows执行Batch，Linux和Macos执行Shell。
input.shell.list[0].label=默认
input.shell.list[8].label=灵活模式
input.manualDesc.tipStr=灵活模式下允许自定义启动命令，以支持更灵活的添加命令启动参数<br>需要注意的是：<br>①插件脚本文件会替代命令中的./random_name.xx，请确保这部分命令符合格式要求<br>②灵活模式下将无法支持内置函数：例如format_multiple_lines<br><br><table> <tr> <th>启动命令</th> <th>操作系统</th> <th>命令常用可扩展的参数</th> </tr> <tr> <td>./random_name.sh</td> <td>Linux/MacOS  </td> <td>-e（启用解释器扩展），-x（显示执行的命令）</td> </tr> <tr> <td>pwsh -command "./random_name.ps1"</td> <td>Linux/Windows/MacOS</td> <td>-NoProfile（不加载用户配置文件），-ExecutionPolicy Bypass（绕过执行策略）</td> </tr> <tr> <td>python3 ./random_name.py</td> <td>Linux/Windows/MacOS</td> <td>-O（优化生成的字节码），-m（运行库模块作为脚本）</td> </tr><tr> <td>py ./random_name.py</td> <td>Linux/Windows/MacOS</td> <td>-2（使用python2执行），-3（使用python3执行）</td> </tr> <tr> <td>sh ./random_name.sh</td> <td>Linux/MacOS</td> <td>-c（从字符串读取命令），-s（从标准输入读取命令）</td> </tr> <tr> <td>cmd.exe /C ./random_name.bat</td> <td>Windows</td> <td>/Q（关闭回显），/V（启用延迟环境变量扩展）</td> </tr> <tr> <td>powershell -command ./random_name.ps1</td> <td>Windows</td> <td>-NoProfile（不加载用户配置文件），-ExecutionPolicy Bypass（绕过执行策略）</td> </tr> <tr> <td>ruby ./random_name.rb</td> <td>Linux/Windows/MacOS</td> <td>-w（启用警告），-d（启用调试模式）</td> </tr> <tr> <td>perl ./random_name.pl</td> <td>Linux/Windows/MacOS</td> <td>-w（启用警告），-d（启用调试模式）</td> </tr> <tr> <td>node ./random_name.js</td> <td>Linux/Windows/MacOS</td> <td>--inspect（启用调试），--max-old-space-size（设置内存限制）</td> </tr><tr> <td>更多...</td> <td>Linux/Windows/MacOS</td> <td>更多...</td> </tr> </table>
input.manualCommand.placeholder=请输入启动命令以及参数
input.script.label=执行脚本
input.script.placeholder=输入脚本
input.script.desc=输入脚本
input.charsetType.label=windows下字符集类型
input.charsetType.desc=仅windows构建机所需参数
800007=======脚本执行失败,问题排查指引======%0A当脚本退出码非0时，执行失败。可以从以下路径进行分析：%0A1. 根据错误日志排查%0A2. 在本地手动执行脚本。如果本地执行也失败，很可能是脚本逻辑问题；%0A如果本地OK，排查构建环境（比如环境依赖、或者代码变更等）
